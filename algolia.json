[
    {
        "date": "2017-03-18T20:53:54+08:00",
        "uri": "about",
        "content": "Info Shanghai  China      Major Software Engineering Contact Email  wangjie2011cs gmail com",
        "objectID": "about",
        "title": "About me",
        "tags": [
            "me"
        ],
        "subtitle": "一米一粟",
        "description": "一米一粟 | Coding and Life",
        "nocomment": true,
        "postmeta": false,
        "notoc": true,
        "seealso": false,
        "bigimg": [
            {
                "src": "https://res.cloudinary.com/dh5dheplm/image/upload/v1533190223/my/gohugo-default-sample-hero-image.jpg",
                "desc": "Review the world as a hero"
            }
        ]
    },
    {
        "title": "TF实现的基于CNN的图片分类",
        "uri": "posts/cnn-tensorflow",
        "content": "Tensorflow         TF             CNN             tensorflow tutorial                                      tensorflow                           CNN                  TF    CNN              CNN Basics                                          TODO  CNN                            TODO                        TF    CNN                    real world                     CPU                                                          Kaggle Dogs vs Cats               2               500     80                         20                                                                      400               TF       tf nn conv2d            input                                   n  width   height   num_channels        input   filter               filter                                                   filter    filtersize     channels numinputchannels      numfilters      filter       strides                                           4       batch_stride   1                xstride  ystride                            depth_stride    1              padding SAME            0        x y                            biases                                                  tf nn max_pool value layer ksize  1  2  2  1   strides  1  2  2  1   padding  SAME          ksize filtersize  2 2     x y      2                 Relu                   Relu                                        def createconvolutionallayer input  numinputchannels  convfiltersize  num_filters   shall define weights will trained using create_weights function  weights   createweights shape  convfiltersize  convfiltersize  numinputchannels  numfilters   create biases using create_biases function  trained  biases   createbiases numfilters  Creating convolutional layer layer   tf nn conv2d input input  filter weights  strides  1  1  1  1   padding  SAME   layer    biases shall using max pooling  layer   tf nn max_pool value layer  ksize  1  2  2  1   strides  1  2  2  1   padding  SAME   Output pooling fed Relu activation function us  layer   tf nn relu layer  return layer Flattening  Output convolutional layer multi dimensional Tensor  want convert one dimensional tensor  done Flattening layer  simply use reshape operation create single dimensional tensor defined below  def createflattenlayer layer   layershape   layer getshape   numfeatures   layershape 1 4  num_elements   layer   tf reshape layer    1  num_features   return layer      Now  let s define function create fully connected layer  Just layer  declare weights biases random normal distributions  fully connected layer  inputs  standard z wx b operation it  sometimes want add non linearity RELU  it  So  let s add condition allows caller add RELU layer def createfclayer input  num_inputs  num_outputs  use_relu True    Let s define trainable weights biases  weights   createweights shape  numinputs  num_outputs   biases   createbiases numoutputs  layer   tf matmul input  weights    biases use_relu  layer   tf nn relu layer  return layer So  finished defining building blocks network   To Continue        Now  let s create placeholder will hold input training images  input images read dataset py file resized 128 x 128 x 3 size  Input placeholder x created shape  None  128  128  3   first dimension None means pass number images it  program  shall pass images batch 16 i e  shape will  16 128 128 3   Similarly  create placeholder ytrue storing predictions  image  two outputs i e  probabilities class  Hence ypred shape  None 2   for batch size 16 will  16 2   x   tf placeholder tf float32  shape  None  imgsize imgsize num_channels   name  x   ytrue   tf placeholder tf float32  shape  None  numclasses   name  y_true   ytruecls   tf argmax y_true  dimension 1       use functions defined above create various layers network  layerconv1   createconvolutional_layer input x  numinputchannels num_channels  convfiltersize filtersizeconv1  numfilters numfilters_conv1  layerconv2   createconvolutionallayer input layerconv1  numinputchannels numfiltersconv1  convfiltersize filtersizeconv2  numfilters numfilters_conv2  layerconv3  createconvolutionallayer input layerconv2  numinputchannels numfiltersconv2  convfiltersize filtersizeconv3  numfilters numfilters_conv3  layerflat   createflattenlayer layerconv3  layerfc1   createfclayer input layerflat  numinputs layerflat getshape   1 4  numelements    numoutputs fclayer_size  use_relu True  layerfc2   createfclayer input layerfc1  numinputs fclayer_size  numoutputs numclasses  use_relu False     mentioned above  probability class applying softmax output fully connected layer  y_pred contains predicted probability class input image  class having higher probability prediction network  Now  let s define cost will minimized reach optimum value weights  will use simple cost will calculated using Tensorflow function softmaxcrossentropywithlogits takes output last fully connected layer actual labels calculate cross_entropy whose average will give us cost  crossentropy   tf nn softmaxcrossentropywithlogits logits layerfc2  labels y_true  cost   tf reducemean crossentropy     Tensorflow implements optimisat",
        "objectID": "posts/cnn-tensorflow",
        "date": "2018-08-01T07:35:02.000Z",
        "bigimg": [
            {
                "src": "https://res.cloudinary.com/dh5dheplm/image/upload/v1533094873/samples/ecommerce/accessories-bag.jpg",
                "desc": ""
            }
        ],
        "draft": false,
        "tags": [
            "CNN",
            "tensorflow"
        ],
        "categories": [
            "machine-learning"
        ]
    },
    {
        "draft": false,
        "uri": "posts/hosting-hugo-with-github-pages",
        "content": "GitHub Pages       pages      pages Hugo  go                                 github issues            images videos  js  css",
        "objectID": "posts/hosting-hugo-with-github-pages",
        "date": "2018-07-23",
        "title": "在Github Pages搭建个人博客",
        "categories": "Effective",
        "tags": [
            "hugo",
            "github-pages"
        ],
        "bigimg": [
            {
                "src": "https://res.cloudinary.com/jimmysong/image/upload/images/20151005061.jpg",
                "desc": ""
            }
        ]
    },
    {
        "title": "Tensorflow 基础知识（开篇）",
        "uri": "posts/tensorflow_basic",
        "content": "TensorFlow       TensorFlow Official Tutorial               TF  TensorFlow                    graph      TensorFlow    n          Tensors    graph       Tensors                               edges              Tensors TensorFlow                   TensorFlow                                                               session                                    Python   tensorflow  sankit sankit    python Python 2 7 6  default  Oct 26 2016  20 30 19   GCC 4 8 4  linux2 Type  help    copyright    credits   license  information          import tensorflow tf TensorFlow      TensorFlow                                TensorFlow                        graph   tf getdefaultgraph                list  graph get_operations                                                  op graph get_operations    print op name                                                    TODO  TensorFlow                          session                                                                                                                sess tf Session       code         code     sess close                          python  with                   tf Session   sess  sess run f  TensorFlow  Tensors TF      Tensors      numPy             numPy      TODO                      a tf constant 1 0  print a  Tensor  Const 0   shape     dtype float32          Python                                         tf Session   sess  print sess run a            1 0     Tensors                 b   tf Variable 2 0 name  test_var      b                            TF                             TensorFlow                           0 11    tf     initializeallvariables         initop   tf initializeall_variables   0 12         globalvariablesinitializer       initop   tf globalvariables_initializer         init_op   TensorFlow                     b        init_op   b  2 0  tf Session   sess  sess run init_op  print sess run b                    graph   tf getdefaultgraph   op graph get_operations    print op name  will output  Const testvar initialvalue test_var test_var Assign test_var read init             a                   b      testvar       testvar initialvalue testvar read              TensorBoard         TensorBoard        TensorFlow                                        tensors                                                feeddict Feeddict                     a   tf placeholder  float      b   tf placeholder  float      y   tf multiply a  b     Earlier used tf mul changed Tensorflow 1 0   Typically load feed_dict somewhere else    may reading training data folder  etc   For simplicity  put values feed_dict    feed_dict   a 2 b 3     with tf Session   sess  print sess run y feed_dict          6   TensorFlow      TensorFlow               gpu  cpu  gpu                                                                 TODO        TensorFlow                                       TensorFlow                random_normal                 w   784 10              0 01       w tf Variable tf random_normal  784  10   stddev 0 01   Reducemean_             b   tf Variable  10 20 30 40 50 60  name  t   tf Session   sess  sess run tf initializeallvariables    sess run tf reduce_mean b     35 ArgMax     python  argmax            tensor        a    0 1  0 2  0 3     20  2  3     b   tf Variable a name  b   tf Session   sess  sess run tf initializeallvariables    sess run tf argmax b 1      array  2  0                                                                          100                 trainX     1 1   trainY trainX 3          import tensorflow tf import numpy np trainX   np linspace  1  1  101  trainY   3   trainX   np random randn trainX shape  0 3                         X   tf placeholder  float   Y   tf placeholder  float               ymodel   w   x         w          w 0             cost    Y   ymodel     TensorFlow          Optimizer                  cost           GradientDescentOptimizer 0 01                         w   tf Variable 0 0  name  weights   y_model   tf multiply X  w  cost    tf pow Y y_model  2   train_op   tf train GradientDescentOptimizer 0 01  minimize cost                       TODO                                 TensorFlow                                                       init  init   tf initializeallvariables    init  tf globalvariablesinitializer   new tf tf Session   sess  sess run init  range 100    x  y  zip trainX  trainY   sess run trainop  feeddict  X  x  Y  y   print sess run w        session run     ini               feeddict        trainop                w      3                           tf Session   sess  sess run init  print sess run w          0 0          symbolic computation                                         TensorFlow                                        code",
        "objectID": "posts/tensorflow_basic",
        "date": "2018-08-01T00:23:39.000Z",
        "bigimg": [
            {
                "src": "https://res.cloudinary.com/dh5dheplm/image/upload/v1533094873/samples/ecommerce/accessories-bag.jpg",
                "desc": ""
            }
        ],
        "draft": false,
        "tags": [
            "TensorFlow"
        ],
        "categories": [
            "machine-learning"
        ]
    }
]